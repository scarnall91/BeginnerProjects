class Employee:
    
    num_of_ems = 0
    raise_amt = 1.04
    
    def __init__(self,first,last,pay):
        self.first = first
        self.last = last
        self.pay = pay
        self.email = first + '.' + last + '@company'
        Employee.num_of_ems += 1
        
    def fullname(self):
        return '{} {}'.format(self.first, self.last)
    
    def apply_raise(self):
        self.pay = int(self.pay * self.raise_amt)
        
    def __repr__(self): #repr meant to be unambiguous representation of the object for developers
        return "Employee('{}','{}',{})".format(self.first,self.last,self.pay)
    
    def __str__(self): #str meant to be a readable representation of the object for end users
        return '{} - {}'.format(self.fullname(),self.email)
    
    def __add__(self,other): #if you try to add two objects, this will make it add their pay together
        return self.pay + other.pay
    
    def __len__(self):
        return len(self.fullname())
    
    @classmethod #class method works with the class instead of the instance
    def set_raise_amt(cls,amount): #class method - use 'cls' for class instead of self
        cls.raise_amt = amount 
        
    @classmethod
    def from_string(cls, emp_str): #another convention to start constructors with 'from' - this is an example of a 'constructor'
        first, last, pay = emp_str.split('-')
        return cls(first, last, pay) #returns new employee object with strings parsed

    @staticmethod 
    def is_workday(day): #static method, doesn't take instance or class!
        if day.weekday() == 5 or day.weekday() == 6:
            return False
        return True
    #has a logic connection to the class but doesn't directly interact with it
    
class Developer(Employee): #putting Employee here makes Developer inherit from the Employee class - has all attrs and meths
    raise_amt = 1.10 #changing raise_amt in sub class makes no difference to main class - don't have to worry about breaking stuff in the main class

    def __init__(self, first, last, pay, prog_lang): #init method for sub class
        super().__init__(first, last, pay) #passes first, last and pay to Employee init method and lets that handle these attributes
        self.prog_lang = prog_lang
        
class Manager(Employee):
    
    def __init__(self, first, last, pay, employees=None): #=None sets that as the default
        super().__init__(first, last, pay)
        if employees is None:
            self.employees = []
        else:
            self.employees = employees
            
    def add_emp(self, emp):
        if emp not in self.employees:
            self.employees.append(emp)
            
    def remove_emp(self, emp):
        if emp in self.employees:
            self.employees.remove(emp)
            
    def print_emps(self):
        for emp in self.employees:
            print('-->',emp.fullname())

emp_1 = Employee('Steve','Carnall',50000)
emp_2 = Developer('Test','User',60000, 'Python')
new_emp_1 = Employee.from_string('John-Doe-70000')

mgr_1 = Manager('Sue','Smith',90000, [emp_1])
mgr_1.add_emp(emp_2)
mgr_1.remove_emp(emp_1)

print(emp_1)
print(repr(emp_1))
print(str(emp_1))
print(emp_1.__repr__())
print(emp_1.__str__())

print(emp_1 + emp_2)

print(len(emp_1))

#print(mgr_1.print_emps())
#print(emp_2.pay)
#emp_2.apply_raise()
#print(emp_2.pay)
#print(emp_2.prog_lang)

import datetime
my_date = datetime.date(2018,3,1)
print(Employee.is_workday(my_date))

#Some additional info to remember:
#regular methods pass self
#class methods pass class
#static methods don't pass anything, same as regular function but have some logical connection with the rest of the class
